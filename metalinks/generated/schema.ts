// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Universe extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Universe entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Universe must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Universe", id.toString(), this);
    }
  }

  static load(id: string): Universe | null {
    return changetype<Universe | null>(store.get("Universe", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get metaLinks(): Array<string> {
    let value = this.get("metaLinks");
    return value!.toStringArray();
  }

  set metaLinks(value: Array<string>) {
    this.set("metaLinks", Value.fromStringArray(value));
  }
}

export class Avatar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("assignedID", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
    this.set("aka", Value.fromString(""));
    this.set("avatarURI", Value.fromString(""));
    this.set("bgAvatarURI", Value.fromString(""));
    this.set("addresses", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Avatar entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Avatar must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Avatar", id.toString(), this);
    }
  }

  static load(id: string): Avatar | null {
    return changetype<Avatar | null>(store.get("Avatar", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get assignedID(): BigInt {
    let value = this.get("assignedID");
    return value!.toBigInt();
  }

  set assignedID(value: BigInt) {
    this.set("assignedID", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get aka(): string {
    let value = this.get("aka");
    return value!.toString();
  }

  set aka(value: string) {
    this.set("aka", Value.fromString(value));
  }

  get bio(): string | null {
    let value = this.get("bio");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bio(value: string | null) {
    if (!value) {
      this.unset("bio");
    } else {
      this.set("bio", Value.fromString(<string>value));
    }
  }

  get avatarURI(): string {
    let value = this.get("avatarURI");
    return value!.toString();
  }

  set avatarURI(value: string) {
    this.set("avatarURI", Value.fromString(value));
  }

  get bgAvatarURI(): string {
    let value = this.get("bgAvatarURI");
    return value!.toString();
  }

  set bgAvatarURI(value: string) {
    this.set("bgAvatarURI", Value.fromString(value));
  }

  get addresses(): Array<string> {
    let value = this.get("addresses");
    return value!.toStringArray();
  }

  set addresses(value: Array<string>) {
    this.set("addresses", Value.fromStringArray(value));
  }

  get links(): Array<string> {
    let value = this.get("links");
    return value!.toStringArray();
  }

  set links(value: Array<string>) {
    this.set("links", Value.fromStringArray(value));
  }
}

export class MetaLink extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("avatarID", Value.fromBigInt(BigInt.zero()));
    this.set("name", Value.fromString(""));
    this.set("aka", Value.fromString(""));
    this.set("bio", Value.fromString(""));
    this.set("avatarURI", Value.fromString(""));
    this.set("bgAvatarURI", Value.fromString(""));
    this.set("link", Value.fromString(""));
    this.set("active", Value.fromBoolean(false));
    this.set("avatar", Value.fromString(""));
    this.set("universe", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MetaLink entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MetaLink must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("MetaLink", id.toString(), this);
    }
  }

  static load(id: string): MetaLink | null {
    return changetype<MetaLink | null>(store.get("MetaLink", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get avatarID(): BigInt {
    let value = this.get("avatarID");
    return value!.toBigInt();
  }

  set avatarID(value: BigInt) {
    this.set("avatarID", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get aka(): string {
    let value = this.get("aka");
    return value!.toString();
  }

  set aka(value: string) {
    this.set("aka", Value.fromString(value));
  }

  get bio(): string {
    let value = this.get("bio");
    return value!.toString();
  }

  set bio(value: string) {
    this.set("bio", Value.fromString(value));
  }

  get avatarURI(): string {
    let value = this.get("avatarURI");
    return value!.toString();
  }

  set avatarURI(value: string) {
    this.set("avatarURI", Value.fromString(value));
  }

  get bgAvatarURI(): string {
    let value = this.get("bgAvatarURI");
    return value!.toString();
  }

  set bgAvatarURI(value: string) {
    this.set("bgAvatarURI", Value.fromString(value));
  }

  get link(): string {
    let value = this.get("link");
    return value!.toString();
  }

  set link(value: string) {
    this.set("link", Value.fromString(value));
  }

  get active(): boolean {
    let value = this.get("active");
    return value!.toBoolean();
  }

  set active(value: boolean) {
    this.set("active", Value.fromBoolean(value));
  }

  get avatar(): string {
    let value = this.get("avatar");
    return value!.toString();
  }

  set avatar(value: string) {
    this.set("avatar", Value.fromString(value));
  }

  get universe(): string {
    let value = this.get("universe");
    return value!.toString();
  }

  set universe(value: string) {
    this.set("universe", Value.fromString(value));
  }
}
